{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The anonymiser pipeline is program anonymising DICOM files based on RSNA Clinical Trials Processor . It has following features: Deterministic (but anonymous) renaming of a folder of DICOM images (scans contained within sub-folders). Easy installation of the Mirc-Ctp tool using Docker. Record, monitor and summarization of anonymisation process, for both DICOM files and folders. Configuration and control on running of anonymisation, such as selecting folders to process, problem handlings etc. Additional search for public health information (PHI) on image using text detection and optical character recognition (OCR) models. The pipeline is tested using in-house and public DICOM data, to ensure the pipeline not leaking PHI in anonymised DICOM file.","title":"Home"},{"location":"#introduction","text":"The anonymiser pipeline is program anonymising DICOM files based on RSNA Clinical Trials Processor . It has following features: Deterministic (but anonymous) renaming of a folder of DICOM images (scans contained within sub-folders). Easy installation of the Mirc-Ctp tool using Docker. Record, monitor and summarization of anonymisation process, for both DICOM files and folders. Configuration and control on running of anonymisation, such as selecting folders to process, problem handlings etc. Additional search for public health information (PHI) on image using text detection and optical character recognition (OCR) models. The pipeline is tested using in-house and public DICOM data, to ensure the pipeline not leaking PHI in anonymised DICOM file.","title":"Introduction"},{"location":"development_details/","text":"Logs logs and records of an anonymisation process are saved in folder log/ . events.log This file logs all the relevant information, warning and errors in an anonymisation process. Check this file for details about running of anonymise pipeline. mirc-ctp.log This file logs all the outputs from mirc-ctp tool. Check this file for details about running of mirc-ctp tool. prog_recorder.db This is an sqlite database tracing the status of every DICOM file and its folder in anonymisation process. See database for more details about the tables in the database. modules The program is consist of following modules/scripts. anon_pipeline.py The module run the complete anonymisation process. - The member function anonymise() in AnonPipeline class is for the starting the process. anon_recorder.py The module records status of files and sub-directory in anonymisation process. The information is stored into a sqlite database whose default path is log/prog_recorder.db . anon_phi_examiner.py The module search for public health information leaked on image and tag text of anonymised DICOM. - Member function search_phi_in_batch() in class PhiOCDR is for searching image. - Function get_phi_in_anon_dcm() is for searching tag text. anon_summary.py The module performs anonymisation summary as in anonymisation summary . id_generator.py The module generate pseudo id for accession number and patient numbers. ocdr.py The module is for text detection and optical character recognition. - Function text_detection_and_recognition() detect text in given image using EAST model of OpenCV and recognize characters on the image using Tesseract. phi_text_examiner.py The module check if a given piece of text contain public health information (PHI) in a DICOM file, by referring to a series of tags (eg: patient name). - Run function check_phi_in_text() for this process - The tags for reference can be configured in PHI_TAGS_CHECK_LIST variable in config.py . - The tags are classified into different types by which different methods for searching PHI are used accordingly. config.py The script contains all the configurations for all above modules. It would be copied from template/config_template.py when the program is setup in the first time. Test Tests are in folder test . pytest should be used to run these tests, whose configuration file is in pytest.ini . See docstring for details of each test. database This is an sqlite database tracing the status of every DICOM file and its directory in anonymisation process. Following tables are contained in the database. folders Record the executive status of subdirectories that containing DICOM files, with the following columns: - name: name of the subdirectory - status: status of process, including - unchecked: not been checked by the program - checking: being checked by the program - checked: checked by the program - pseudo_name: pseudo_name corresponding to the folder folder_process_status Record the process status of subdirectories that containing DICOM files, with the following columns. - name: name of the subdirectory - process: process status (eg: empty folder, partially corrupted). see FOLDER_STATUS in config.py for more details of the categories. Please note that each folder can contain multiple process status, eg: a folder can have both corrupted files and files with PHI on image. folder_process_status_lookup A look up table for the process status in folder_process_status. They are configured in config.py. - status: name of process status for internal use - status_name: a name for external use (eg: tables) - description: a detailed description for the status - action: what action to take when this happen - skip: skip the subdirectory - warning: log a warning message - done: do nothing - rank: this is used to determine the priorities in reports. files The table record status about each file. - file: file name - folder: the subdirectory containing the file - status: status of the file; see FILE_STATUS in config.py for more details. file_status_lookup A look up table for the status in files. - status: status name - description: description of the status filename_lookup A look up between filename and new filename - file: file name - folder: folder name - new_name: new file name phi_on_image The table record any public health information (PHI) found in a image - file: file name where the PHI found - folder: name of the folder containing the file - text_id: id for the PHI text (as multiple PHI text could be found on an image) - phi_text: the original text found","title":"Development details"},{"location":"development_details/#logs","text":"logs and records of an anonymisation process are saved in folder log/ .","title":"Logs"},{"location":"development_details/#eventslog","text":"This file logs all the relevant information, warning and errors in an anonymisation process. Check this file for details about running of anonymise pipeline.","title":"events.log"},{"location":"development_details/#mirc-ctplog","text":"This file logs all the outputs from mirc-ctp tool. Check this file for details about running of mirc-ctp tool.","title":"mirc-ctp.log"},{"location":"development_details/#prog_recorderdb","text":"This is an sqlite database tracing the status of every DICOM file and its folder in anonymisation process. See database for more details about the tables in the database.","title":"prog_recorder.db"},{"location":"development_details/#modules","text":"The program is consist of following modules/scripts.","title":"modules"},{"location":"development_details/#anon_pipelinepy","text":"The module run the complete anonymisation process. - The member function anonymise() in AnonPipeline class is for the starting the process.","title":"anon_pipeline.py"},{"location":"development_details/#anon_recorderpy","text":"The module records status of files and sub-directory in anonymisation process. The information is stored into a sqlite database whose default path is log/prog_recorder.db .","title":"anon_recorder.py"},{"location":"development_details/#anon_phi_examinerpy","text":"The module search for public health information leaked on image and tag text of anonymised DICOM. - Member function search_phi_in_batch() in class PhiOCDR is for searching image. - Function get_phi_in_anon_dcm() is for searching tag text.","title":"anon_phi_examiner.py"},{"location":"development_details/#anon_summarypy","text":"The module performs anonymisation summary as in anonymisation summary .","title":"anon_summary.py"},{"location":"development_details/#id_generatorpy","text":"The module generate pseudo id for accession number and patient numbers.","title":"id_generator.py"},{"location":"development_details/#ocdrpy","text":"The module is for text detection and optical character recognition. - Function text_detection_and_recognition() detect text in given image using EAST model of OpenCV and recognize characters on the image using Tesseract.","title":"ocdr.py"},{"location":"development_details/#phi_text_examinerpy","text":"The module check if a given piece of text contain public health information (PHI) in a DICOM file, by referring to a series of tags (eg: patient name). - Run function check_phi_in_text() for this process - The tags for reference can be configured in PHI_TAGS_CHECK_LIST variable in config.py . - The tags are classified into different types by which different methods for searching PHI are used accordingly.","title":"phi_text_examiner.py"},{"location":"development_details/#configpy","text":"The script contains all the configurations for all above modules. It would be copied from template/config_template.py when the program is setup in the first time.","title":"config.py"},{"location":"development_details/#test","text":"Tests are in folder test . pytest should be used to run these tests, whose configuration file is in pytest.ini . See docstring for details of each test.","title":"Test"},{"location":"development_details/#database","text":"This is an sqlite database tracing the status of every DICOM file and its directory in anonymisation process. Following tables are contained in the database.","title":"database"},{"location":"development_details/#folders","text":"Record the executive status of subdirectories that containing DICOM files, with the following columns: - name: name of the subdirectory - status: status of process, including - unchecked: not been checked by the program - checking: being checked by the program - checked: checked by the program - pseudo_name: pseudo_name corresponding to the folder","title":"folders"},{"location":"development_details/#folder_process_status","text":"Record the process status of subdirectories that containing DICOM files, with the following columns. - name: name of the subdirectory - process: process status (eg: empty folder, partially corrupted). see FOLDER_STATUS in config.py for more details of the categories. Please note that each folder can contain multiple process status, eg: a folder can have both corrupted files and files with PHI on image.","title":"folder_process_status"},{"location":"development_details/#folder_process_status_lookup","text":"A look up table for the process status in folder_process_status. They are configured in config.py. - status: name of process status for internal use - status_name: a name for external use (eg: tables) - description: a detailed description for the status - action: what action to take when this happen - skip: skip the subdirectory - warning: log a warning message - done: do nothing - rank: this is used to determine the priorities in reports.","title":"folder_process_status_lookup"},{"location":"development_details/#files","text":"The table record status about each file. - file: file name - folder: the subdirectory containing the file - status: status of the file; see FILE_STATUS in config.py for more details.","title":"files"},{"location":"development_details/#file_status_lookup","text":"A look up table for the status in files. - status: status name - description: description of the status","title":"file_status_lookup"},{"location":"development_details/#filename_lookup","text":"A look up between filename and new filename - file: file name - folder: folder name - new_name: new file name","title":"filename_lookup"},{"location":"development_details/#phi_on_image","text":"The table record any public health information (PHI) found in a image - file: file name where the PHI found - folder: name of the folder containing the file - text_id: id for the PHI text (as multiple PHI text could be found on an image) - phi_text: the original text found","title":"phi_on_image"},{"location":"features/","text":"Deterministic renaming of folder names Recall the structure of input folder <input_folder>/ <accession number 1>/ <DICOM file 1> <DICOM file 2> <accession number 2>/ <DICOM file 1> <DICOM file 2> The anonymisation rename the subfolder and DICOM files in output. <output_folder>/ <pseudo folder name 1>/ 001.dcm 002.dcm <pseudo folder name 2>/ 001.dcm 002.dcm It renames subfolder containing a particular study: - Patient ID: 10 char hex - Accession number: 12 char hex An adjustable salt is used to ensure additional anonymisation. All DICOM files are sequentially renamed within each subdirectory Please note: It's recommended to use accession number as subfolder name so that the program can efficiently trace which of them has been processed.","title":"Features"},{"location":"features/#deterministic-renaming-of-folder-names","text":"Recall the structure of input folder <input_folder>/ <accession number 1>/ <DICOM file 1> <DICOM file 2> <accession number 2>/ <DICOM file 1> <DICOM file 2> The anonymisation rename the subfolder and DICOM files in output. <output_folder>/ <pseudo folder name 1>/ 001.dcm 002.dcm <pseudo folder name 2>/ 001.dcm 002.dcm It renames subfolder containing a particular study: - Patient ID: 10 char hex - Accession number: 12 char hex An adjustable salt is used to ensure additional anonymisation. All DICOM files are sequentially renamed within each subdirectory Please note: It's recommended to use accession number as subfolder name so that the program can efficiently trace which of them has been processed.","title":"Deterministic renaming of folder names"},{"location":"getting_start/","text":"Installation Enviroment Linux Unbuntu 22.04 Pre-requriments Github Docker Python 3.10 Setup clone the repository of anonymisation pipeline, for example: git clone git@github.com:plymouth-neuroimaging/anon-pipeline-set.git run the setup script ./setup.sh install python packages in requirements.txt. It's recommended to use a virtual environment, for example: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt a copy of file config.py should have been created in the root folder ( anon-pipeline-set ). Update the SALT variable in the file to desired value. (see features for details about salt). If the config.py file is not created automatically, it can be copied manually from templates/config_template.py . Run Quick Run with example data Try the following code for a quick run with an example dataset: ./anon_pipeline.py example_input/ -p my_results Here, my_results will be created containing the anonymised files. Run with your own data To anonymise you own data, you can create dataset in following structure <input_folder>/ <accession number 1>/ <DICOM file 1> <DICOM file 2> <accession number 2>/ <DICOM file 1> <DICOM file 2> and run the following code ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> Please note that the input and output folder don't have to be saved in the root folder. Continuous mode and restart mode In restart mode, the program assume there are no processed files (and folders) and would raise an error if it found any. This mode is the default. In continuous mode, if there are processed files in output folder, the program will skip them and continue to process the rest. To use continuous mode, add option -c in command, for example: ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> -c Please note : the program assume that accession number is used as name of sub-folder (the folder containing the DICOM files), if this is not the case the program will fail to detect processed sub-directories and process them. Exit in error The program is default to continue processing, if an unknown error is encountered when processing a sub-folder. If this option is on, the program will stop processing. Use -e option to enable this option, for example: ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> -e Skip extra checks If this option is on, the program will skip the optical character recognition (OCR) search for public health information (PHI) embedded on image. Use -s to enable this option, for example: ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> -s","title":"Getting start"},{"location":"getting_start/#installation","text":"","title":"Installation"},{"location":"getting_start/#enviroment","text":"Linux Unbuntu 22.04","title":"Enviroment"},{"location":"getting_start/#pre-requriments","text":"Github Docker Python 3.10","title":"Pre-requriments"},{"location":"getting_start/#setup","text":"clone the repository of anonymisation pipeline, for example: git clone git@github.com:plymouth-neuroimaging/anon-pipeline-set.git run the setup script ./setup.sh install python packages in requirements.txt. It's recommended to use a virtual environment, for example: python3 -m venv venv source venv/bin/activate pip install -r requirements.txt a copy of file config.py should have been created in the root folder ( anon-pipeline-set ). Update the SALT variable in the file to desired value. (see features for details about salt). If the config.py file is not created automatically, it can be copied manually from templates/config_template.py .","title":"Setup"},{"location":"getting_start/#run","text":"","title":"Run"},{"location":"getting_start/#quick-run-with-example-data","text":"Try the following code for a quick run with an example dataset: ./anon_pipeline.py example_input/ -p my_results Here, my_results will be created containing the anonymised files.","title":"Quick Run with example data"},{"location":"getting_start/#run-with-your-own-data","text":"To anonymise you own data, you can create dataset in following structure <input_folder>/ <accession number 1>/ <DICOM file 1> <DICOM file 2> <accession number 2>/ <DICOM file 1> <DICOM file 2> and run the following code ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> Please note that the input and output folder don't have to be saved in the root folder.","title":"Run with your own data"},{"location":"getting_start/#continuous-mode-and-restart-mode","text":"In restart mode, the program assume there are no processed files (and folders) and would raise an error if it found any. This mode is the default. In continuous mode, if there are processed files in output folder, the program will skip them and continue to process the rest. To use continuous mode, add option -c in command, for example: ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> -c Please note : the program assume that accession number is used as name of sub-folder (the folder containing the DICOM files), if this is not the case the program will fail to detect processed sub-directories and process them.","title":"Continuous mode and restart mode"},{"location":"getting_start/#exit-in-error","text":"The program is default to continue processing, if an unknown error is encountered when processing a sub-folder. If this option is on, the program will stop processing. Use -e option to enable this option, for example: ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> -e","title":"Exit in error"},{"location":"getting_start/#skip-extra-checks","text":"If this option is on, the program will skip the optical character recognition (OCR) search for public health information (PHI) embedded on image. Use -s to enable this option, for example: ./anon_pipeline.py <path/to/input_folder> -p <path/to/output_folder> -s","title":"Skip extra checks"}]}